// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin make-row(BDTgutter: BDTgrid-gutter-width) {
  --#{BDTprefix}gutter-x: #{BDTgutter};
  --#{BDTprefix}gutter-y: 0;
  display: flex;
  flex-wrap: wrap;
  // TODO: Revisit calc order after https://github.com/react-bootstrap/react-bootstrap/issues/6039 is fixed
  margin-top: calc(-1 * var(--#{BDTprefix}gutter-y)); // stylelint-disable-line function-disallowed-list
  margin-right: calc(-.5 * var(--#{BDTprefix}gutter-x)); // stylelint-disable-line function-disallowed-list
  margin-left: calc(-.5 * var(--#{BDTprefix}gutter-x)); // stylelint-disable-line function-disallowed-list
}

@mixin make-col-ready() {
  // Add box sizing if only the grid is loaded
  box-sizing: if(variable-exists(include-column-box-sizing) and BDTinclude-column-box-sizing, border-box, null);
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we set the width
  // later on to override this initial width.
  flex-shrink: 0;
  width: 100%;
  max-width: 100%; // Prevent `.col-auto`, `.col` (& responsive variants) from breaking out the grid
  padding-right: calc(var(--#{BDTprefix}gutter-x) * .5); // stylelint-disable-line function-disallowed-list
  padding-left: calc(var(--#{BDTprefix}gutter-x) * .5); // stylelint-disable-line function-disallowed-list
  margin-top: var(--#{BDTprefix}gutter-y);
}

@mixin make-col(BDTsize: false, BDTcolumns: BDTgrid-columns) {
  @if BDTsize {
    flex: 0 0 auto;
    width: percentage(divide(BDTsize, BDTcolumns));

  } @else {
    flex: 1 1 0;
    max-width: 100%;
  }
}

@mixin make-col-auto() {
  flex: 0 0 auto;
  width: auto;
}

@mixin make-col-offset(BDTsize, BDTcolumns: BDTgrid-columns) {
  BDTnum: divide(BDTsize, BDTcolumns);
  margin-left: if(BDTnum == 0, 0, percentage(BDTnum));
}

// Row columns
//
// Specify on a parent element(e.g., .row) to force immediate children into NN
// numberof columns. Supports wrapping to new lines, but does not do a Masonry
// style grid.
@mixin row-cols(BDTcount) {
  > * {
    flex: 0 0 auto;
    width: divide(100%, BDTcount);
  }
}

// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `BDTgrid-columns`.

@mixin make-grid-columns(BDTcolumns: BDTgrid-columns, BDTgutter: BDTgrid-gutter-width, BDTbreakpoints: BDTgrid-breakpoints) {
  @each BDTbreakpoint in map-keys(BDTbreakpoints) {
    BDTinfix: breakpoint-infix(BDTbreakpoint, BDTbreakpoints);

    @include media-breakpoint-up(BDTbreakpoint, BDTbreakpoints) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col#{BDTinfix} {
        flex: 1 0 0%; // Flexbugs #4: https://github.com/philipwalton/flexbugs#flexbug-4
      }

      .row-cols#{BDTinfix}-auto > * {
        @include make-col-auto();
      }

      @if BDTgrid-row-columns > 0 {
        @for BDTi from 1 through BDTgrid-row-columns {
          .row-cols#{BDTinfix}-#{BDTi} {
            @include row-cols(BDTi);
          }
        }
      }

      .col#{BDTinfix}-auto {
        @include make-col-auto();
      }

      @if BDTcolumns > 0 {
        @for BDTi from 1 through BDTcolumns {
          .col#{BDTinfix}-#{BDTi} {
            @include make-col(BDTi, BDTcolumns);
          }
        }

        // `BDTcolumns - 1` because offsetting by the width of an entire row isn't possible
        @for BDTi from 0 through (BDTcolumns - 1) {
          @if not (BDTinfix == "" and BDTi == 0) { // Avoid emitting useless .offset-0
            .offset#{BDTinfix}-#{BDTi} {
              @include make-col-offset(BDTi, BDTcolumns);
            }
          }
        }
      }

      // Gutters
      //
      // Make use of `.g-*`, `.gx-*` or `.gy-*` utilities to change spacing between the columns.
      @each BDTkey, BDTvalue in BDTgutters {
        .g#{BDTinfix}-#{BDTkey},
        .gx#{BDTinfix}-#{BDTkey} {
          --#{BDTprefix}gutter-x: #{BDTvalue};
        }

        .g#{BDTinfix}-#{BDTkey},
        .gy#{BDTinfix}-#{BDTkey} {
          --#{BDTprefix}gutter-y: #{BDTvalue};
        }
      }
    }
  }
}

@mixin make-cssgrid(BDTcolumns: BDTgrid-columns, BDTbreakpoints: BDTgrid-breakpoints) {
  @each BDTbreakpoint in map-keys(BDTbreakpoints) {
    BDTinfix: breakpoint-infix(BDTbreakpoint, BDTbreakpoints);

    @include media-breakpoint-up(BDTbreakpoint, BDTbreakpoints) {
      @if BDTcolumns > 0 {
        @for BDTi from 1 through BDTcolumns {
          .g-col#{BDTinfix}-#{BDTi} {
            grid-column: auto / span BDTi;
          }
        }

        // Start with `1` because `0` is and invalid value.
        // Ends with `BDTcolumns - 1` because offsetting by the width of an entire row isn't possible.
        @for BDTi from 1 through (BDTcolumns - 1) {
          .g-start#{BDTinfix}-#{BDTi} {
            grid-column-start: BDTi;
          }
        }
      }
    }
  }
}
